import { Task } from '@prisma/client';
import type { inferProcedureOutput } from '@trpc/server';
import type { NextPage } from 'next';
import { signIn, signOut } from 'next-auth/react';
import Head from 'next/head';
import { useState } from 'react';

import type { AppRouter } from '@test/api';

import { trpc } from '@utils';

import { TaskModal } from '../components/taskModal';

const Home: NextPage = () => {
  const { data: taskData, isLoading } = trpc.task.all.useQuery(undefined, {
    onSuccess(taskItems) {
      setTaskItems(taskItems);
    },
  });
  const [modalOpen, setModalOpen] = useState<boolean>(false);
  const [taskItems, setTaskItems] = useState<Task[]>();

  return (
    <>
      <Head>
        <title>T3 Task Board</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-white p-8 w-full h-screen">
        <header>
          <Login />
        </header>
        <main>
          <section className="max-auto">
            <section className="flex">
              <h1 className="text-3xl font-bold mr-2">Create task </h1>
              <button
                type="button"
                className="w-10 h-10 rounded-full  pt-0 pb-0.5 bg-black text-white font-semibold text-xl hover:bg-[#d3aa10]"
                onClick={() => setModalOpen(true)}
              >
                +
              </button>
            </section>
            <section>
              {!taskData || isLoading ? (
                <p>Loading..</p>
              ) : (
                taskItems && (
                  <div className="flex w-full mt-6">
                    <div className="flex-none w-1/3">
                      <h2 className="text-xl font-bold mr-2 mb-5">To do</h2>

                      <div className="">
                        {taskItems?.map((p) => {
                          return <TaskCard key={p.id} task={p} />;
                        })}
                      </div>
                    </div>
                    <div className="flex-none w-1/3">
                      <h2 className="text-xl font-bold mr-2 ">In progress</h2>
                    </div>{' '}
                    <div className="flex-none w-1/3">
                      <h2 className="text-xl font-bold mr-2 ">Done</h2>
                    </div>
                  </div>
                )
              )}
            </section>
            <section className="mt-80"></section>
          </section>
        </main>

        {modalOpen && (
          <TaskModal setModalOpen={setModalOpen} setTaskItems={setTaskItems} />
        )}
      </div>
    </>
  );
};

export default Home;

const TaskCard: React.FC<{
  task: inferProcedureOutput<AppRouter['task']['all']>[number];
}> = ({ task }) => {
  return (
    <div className="bg-slate-500 p-5 my-3 rounded-lg w-4/5 hover:scale-[101%] transition-all">
      <h2 className="text-m font-bold text-white">{task.title}</h2>
      <p>{task.description}</p>
    </div>
  );
};

const Login: React.FC = () => {
  const { data: session } = trpc.auth.getSession.useQuery();

  return (
    <div className="flex flex-col items-end">
      <button
        className="rounded-full bg-black/10 px-10 py-3 font-semibold  no-underline transition hover:bg-white/20 hover:scale-[101%]"
        onClick={session ? () => signOut() : () => signIn()}
      >
        {session ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  );
};
